"use strict";(self.webpackChunklogry_doc=self.webpackChunklogry_doc||[]).push([[3846],{8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>t});var s=r(6540);const o={},l=s.createContext(o);function a(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),s.createElement(l.Provider,{value:n},e.children)}},8631:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"core-concepts/logger-handlers-and-tasks","title":"Logger Handlers and Tasks","description":"Each Logger instance internally binds to a HandlerManager, inherited from its LoggerCore.","source":"@site/docs/core-concepts/logger-handlers-and-tasks.md","sourceDirName":"core-concepts","slug":"/core-concepts/logger-handlers-and-tasks","permalink":"/logry/docs/core-concepts/logger-handlers-and-tasks","draft":false,"unlisted":false,"editUrl":"https://github.com/yiming-liao/logry/edit/main/website/docs/core-concepts/logger-handlers-and-tasks.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Logger Core","permalink":"/logry/docs/core-concepts/logger-core"},"next":{"title":"Modules","permalink":"/logry/docs/category/modules"}}');var o=r(4848),l=r(8453);const a={sidebar_position:4},t="Logger Handlers and Tasks",i={},c=[];function d(e){const n={code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"logger-handlers-and-tasks",children:"Logger Handlers and Tasks"})}),"\n",(0,o.jsx)(n.p,{children:"Each Logger instance internally binds to a HandlerManager, inherited from its LoggerCore."}),"\n",(0,o.jsx)(n.p,{children:"This module orchestrates all registered log handlers, manages asynchronous tasks, and controls error recovery and flush strategies."}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Handlers are responsible for final log delivery, such as writing to the console, server, or external services."}),"\n",(0,o.jsxs)(n.li,{children:["You can dynamically attach or remove handlers:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"addHandler(handler, id?)"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.code,{children:"removeHandler(id)"})}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["It also ensures all async handlers complete with:","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"flush(timeout?)"}),": waits for pending log operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"dispose()"}),": clean up all resources and cancel strategies"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"Behind the scenes, HandlerManager tracks pending tasks and gracefully handles errors via configurable callbacks and timeout policies."}),"\n",(0,o.jsx)(n.p,{children:"This flexible system allows reliable logging \u2014 even in asynchronous or failure-prone environments."})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);