"use strict";(self.webpackChunklogry_doc=self.webpackChunklogry_doc||[]).push([[6336],{3526:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"Introduction","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Getting Started","href":"/logry/docs/introduction/getting-started","docId":"introduction/getting-started","unlisted":false},{"type":"link","label":"Quick Start","href":"/logry/docs/introduction/quick-start","docId":"introduction/quick-start","unlisted":false},{"type":"link","label":"Presets","href":"/logry/docs/introduction/presets","docId":"introduction/presets","unlisted":false}]},{"type":"category","label":"Core Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Log Level","href":"/logry/docs/core-concepts/log-level","docId":"core-concepts/log-level","unlisted":false},{"type":"link","label":"Child Loggers","href":"/logry/docs/core-concepts/child-loggers","docId":"core-concepts/child-loggers","unlisted":false},{"type":"link","label":"Logger Core","href":"/logry/docs/core-concepts/logger-core","docId":"core-concepts/logger-core","unlisted":false},{"type":"link","label":"Logger Handlers and Tasks","href":"/logry/docs/core-concepts/logger-handlers-and-tasks","docId":"core-concepts/logger-handlers-and-tasks","unlisted":false}],"href":"/logry/docs/category/core-concepts"},{"type":"category","label":"Modules","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Normalizer","href":"/logry/docs/modules/normalizer","docId":"modules/normalizer","unlisted":false},{"type":"link","label":"Formatter","href":"/logry/docs/modules/formatter","docId":"modules/formatter","unlisted":false},{"type":"link","label":"Transporter","href":"/logry/docs/modules/transporter","docId":"modules/transporter","unlisted":false}],"href":"/logry/docs/category/modules"},{"type":"category","label":"Advanced & Tools","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Devtools","href":"/logry/docs/advanced-and-tools/devtools","docId":"advanced-and-tools/devtools","unlisted":false},{"type":"link","label":"Development Mode Detection","href":"/logry/docs/advanced-and-tools/development-mode-detection","docId":"advanced-and-tools/development-mode-detection","unlisted":false}],"href":"/logry/docs/category/advanced--tools"}]},"docs":{"advanced-and-tools/development-mode-detection":{"id":"advanced-and-tools/development-mode-detection","title":"Development Mode Detection","description":"This function detects whether the runtime is in development mode.","sidebar":"tutorialSidebar"},"advanced-and-tools/devtools":{"id":"advanced-and-tools/devtools","title":"Devtools","description":"Logry includes small tools to help you debug and inspect logger internals.","sidebar":"tutorialSidebar"},"core-concepts/child-loggers":{"id":"core-concepts/child-loggers","title":"Child Loggers","description":"In Logry, every logger instance is lightweight and modular.","sidebar":"tutorialSidebar"},"core-concepts/log-level":{"id":"core-concepts/log-level","title":"Log Level","description":"Logry supports seven log levels, from most critical to most verbose:","sidebar":"tutorialSidebar"},"core-concepts/logger-core":{"id":"core-concepts/logger-core","title":"Logger Core","description":"The core engine responsible for managing log levels, shared identity (id), and optional configurations for formatting, normalization, and handlers.","sidebar":"tutorialSidebar"},"core-concepts/logger-handlers-and-tasks":{"id":"core-concepts/logger-handlers-and-tasks","title":"Logger Handlers and Tasks","description":"Each Logger instance internally binds to a HandlerManager, inherited from its LoggerCore.","sidebar":"tutorialSidebar"},"introduction/getting-started":{"id":"introduction/getting-started","title":"Getting Started","description":"Welcome to Logry \u2014 A clean, lightweight, cross-platform logger that just works on both Node.js and modern browsers.","sidebar":"tutorialSidebar"},"introduction/presets":{"id":"introduction/presets","title":"Presets","description":"Logry offers several built-in logger presets. Each preset is a set of normalizer and formatter settings for different log styles.","sidebar":"tutorialSidebar"},"introduction/quick-start":{"id":"introduction/quick-start","title":"Quick Start","description":"Installation","sidebar":"tutorialSidebar"},"modules/formatter":{"id":"modules/formatter","title":"Formatter","description":"The Formatter layer is responsible for converting the normalized parts of a log into final output strings \u2014 styled, readable, and optionally color-coded.","sidebar":"tutorialSidebar"},"modules/normalizer":{"id":"modules/normalizer","title":"Normalizer","description":"Before any log is formatted or transported, Logry runs it through a platform-aware normalizer \u2014 ensuring consistent structure, reliable types, and flexible customization","sidebar":"tutorialSidebar"},"modules/transporter":{"id":"modules/transporter","title":"Transporter","description":"The Transporter is the final step in the logging pipeline \u2014 responsible for delivering the formatted log to its destination.","sidebar":"tutorialSidebar"}}}}')}}]);