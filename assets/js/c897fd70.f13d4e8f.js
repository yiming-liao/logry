"use strict";(self.webpackChunklogry_doc=self.webpackChunklogry_doc||[]).push([[8281],{400:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"advanced-and-tools/development-mode-detection","title":"Development Mode Detection","description":"This function detects whether the runtime is in development mode.","source":"@site/docs/advanced-and-tools/development-mode-detection.md","sourceDirName":"advanced-and-tools","slug":"/advanced-and-tools/development-mode-detection","permalink":"/logry/docs/advanced-and-tools/development-mode-detection","draft":false,"unlisted":false,"editUrl":"https://github.com/yiming-liao/logry/edit/main/website/docs/advanced-and-tools/development-mode-detection.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Devtools","permalink":"/logry/docs/advanced-and-tools/devtools"}}');var s=t(4848),d=t(8453);const i={sidebar_position:2},r="Development Mode Detection",l={},c=[];function a(e){const n={br:"br",code:"code",h1:"h1",header:"header",li:"li",p:"p",ul:"ul",...(0,d.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"development-mode-detection",children:"Development Mode Detection"})}),"\n",(0,s.jsxs)(n.p,{children:["This function detects whether the runtime is in development mode.",(0,s.jsx)(n.br,{}),"\n","It is primarily used to control internal logging and error reporting within the library, such as internal-log and internal-error messages."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"Node.js"}),", it checks the NODE_ENV environment variable:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Returns true if ",(0,s.jsx)(n.code,{children:"NODE_ENV"})," is not set to 'production'."]}),"\n",(0,s.jsxs)(n.li,{children:["Defaults to true (development) if ",(0,s.jsx)(n.code,{children:"NODE_ENV"})," is undefined."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.code,{children:"Browsers"}),", it checks the global flag ",(0,s.jsx)(n.code,{children:"__LOGRY_DEV__"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns true if the flag is truthy."}),"\n",(0,s.jsx)(n.li,{children:"Defaults to false (production) if undefined."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This setup assumes Node defaults to development mode for easier local testing, while browsers default to production to avoid unnecessary debug logs."})]})}function u(e={}){const{wrapper:n}={...(0,d.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>r});var o=t(6540);const s={},d=o.createContext(s);function i(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);