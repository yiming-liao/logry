"use strict";(self.webpackChunklogry_doc=self.webpackChunklogry_doc||[]).push([[7604],{2511:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"introduction/quick-start","title":"Quick Start","description":"Installation","source":"@site/docs/introduction/quick-start.md","sourceDirName":"introduction","slug":"/introduction/quick-start","permalink":"/logry/docs/introduction/quick-start","draft":false,"unlisted":false,"editUrl":"https://github.com/yiming-liao/logry/edit/main/website/docs/introduction/quick-start.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/logry/docs/introduction/getting-started"},"next":{"title":"Presets","permalink":"/logry/docs/introduction/presets"}}');var o=r(4848),s=r(8453);const i={sidebar_position:2},l="Quick Start",a={},c=[];function d(e){const n={br:"br",code:"code",em:"em",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"quick-start",children:"Quick Start"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)("img",{src:"https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Travel%20and%20places/Rocket.png",alt:"Rocket",width:"25",height:"25"})," ",(0,o.jsx)(n.strong,{children:"Installation"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npm install logry\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Or use ",(0,o.jsx)(n.em,{children:"yarn"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"yarn add logry\n"})}),"\n",(0,o.jsx)("h3",{children:"Using Static Logger Methods"}),"\n",(0,o.jsxs)(n.p,{children:["The easiest way to use ",(0,o.jsx)(n.strong,{children:"Logry"})," is by calling its static logging methods.",(0,o.jsx)(n.br,{}),"\n","They work instantly without a logger instance, ignore level restrictions, and default to the ",(0,o.jsx)(n.strong,{children:"\u201cpretty\u201d"})," preset for clean outpu"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { trace, debug, info, warn, error, fatal } from "logry";\n\ninfo("\ud83d\udc4b\ud83c\udffc Hi there! Welcome to Logry!");\n\n// 2nd argument is metadata for additional details\nwarn("User session is about to expire", { user: "John Doe" });\n\n// Error with full error object\nerror("Unexpected error occurred", new Error("Something went wrong"));\n'})}),"\n",(0,o.jsx)("h3",{children:"Creating a Custom Logger Instance"}),"\n",(0,o.jsxs)(n.p,{children:["You can create a logger by calling ",(0,o.jsx)(n.strong,{children:"logry()"}),".",(0,o.jsx)(n.br,{}),"\n","By default, the log level is set to ",(0,o.jsx)(n.strong,{children:'"warn"'}),", so only logs with levels ",(0,o.jsx)(n.strong,{children:'"warn"'}),", ",(0,o.jsx)(n.strong,{children:'"error"'}),", and ",(0,o.jsx)(n.strong,{children:'"fatal"'})," will be shown.",(0,o.jsx)(n.br,{}),"\n","If you don\u2019t specify an ID, the logger will use ",(0,o.jsx)(n.strong,{children:'"default"'})," as its identifier automatically."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"import { logry } from \"logry\";\n\n// Create a custom logger instance (defaults to id: 'default' and level: 'warn')\nconst logger = logry();\n\n// \u274c This won't be shown \u2014 'info' is lower than the default 'warn' level\nlogger.info(\"User logged in\");\n\n// \u2705 This will be shown \u2014 'warn' and above are allowed\nlogger.warn(\"User login warning\");\n\n// Inspect internal core (optional)\nconsole.log(logger.getCore());\n// -> LoggerCore { id: 'default', level: 'warn', ... }\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Basic Logger Setup for Development"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typeScript",children:'import { logry } from "logry";\n\nconst logger = logry({\n  id: "MyLogger",\n  level: "debug", // Will show: debug, info, warn, error, fatal (trace will be hidden)\n});\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Full Custom Logger Setup"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'import { logry } from "logry";\n\nconst logger = logry({\n  id: "\ud83c\udf10 My Logger",\n  level: "info",\n  scope: ["auth", "api"],\n  context: { env: "production", appVersion: "2.5.1" },\n  preset: "verbose", // "json" | "pretty" | "pretty-multi-line" | "minimal" | "verbose"\n  normalizerConfig: {\n    node: {\n      timestamp: { style: "iso" },\n      // ...\n    },\n    browser: {\n      timestamp: { style: "pretty" },\n      // ...\n    },\n  },\n  formatterConfig: {\n    node: {\n      id: { ansiColor: "\\x1b[35m" },\n      message: { customFormatter: ({ part }) => "\\n" + part.toUpperCase() },\n      // ...\n    },\n    browser: {\n      id: { cssStyle: "color: purple;" },\n      context: { format: "compact" },\n      // ...\n    },\n  },\n  handlerConfig: {\n    onError: (error: unknown, handlerId: string) =>\n      console.log(handlerId, error),\n    // ...\n  },\n});\n'})})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>l});var t=r(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);