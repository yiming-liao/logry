"use strict";(self.webpackChunklogry_doc=self.webpackChunklogry_doc||[]).push([[20],{8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>c});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}},9605:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"core-concepts/child-loggers","title":"Child Loggers","description":"In Logry, every logger instance is lightweight and modular.","source":"@site/docs/core-concepts/child-loggers.md","sourceDirName":"core-concepts","slug":"/core-concepts/child-loggers","permalink":"/logry/docs/core-concepts/child-loggers","draft":false,"unlisted":false,"editUrl":"https://github.com/yiming-liao/logry/edit/main/website/docs/core-concepts/child-loggers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Child Loggers"},"sidebar":"tutorialSidebar","previous":{"title":"Log Level","permalink":"/logry/docs/core-concepts/log-level"},"next":{"title":"Logger Core","permalink":"/logry/docs/core-concepts/logger-core"}}');var s=r(4848),t=r(8453);const o={sidebar_position:2,title:"Child Loggers"},c=" Child Loggers",l={},d=[{value:"Creating a Child Logger",id:"-creating-a-child-logger",level:3},{value:"Child Logger Inheritance",id:"-child-logger-inheritance",level:3}];function h(e){const n={br:"br",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsxs)(n.h1,{id:"-child-loggers",children:[(0,s.jsx)("img",{src:"https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Activities/Teddy%20Bear.png",alt:"Teddy Bear",width:"36",height:"36"})," Child Loggers"]})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.strong,{children:"Logry"}),", every logger instance is lightweight and modular.",(0,s.jsx)(n.br,{}),"\n","You can freely create ",(0,s.jsx)(n.strong,{children:"child loggers"})," that inherit settings from their parent \u2014 while overriding only what you need."]}),"\n",(0,s.jsxs)(n.h3,{id:"-creating-a-child-logger",children:[(0,s.jsx)("img",{src:"https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Activities/Sparkles.png",alt:"Sparkles",width:"20",height:"20"})," Creating a Child Logger"]}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:".child()"})," method to create a scoped or customized logger:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const logger = logry({ id: "main-app", level: "info" });\n\nconst authLogger = logger.child({\n  level: "debug", // override log level\n  scope: "auth", // add a scope\n  context: { userType: "admin" }, // inject default context\n});\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"-child-logger-inheritance",children:[(0,s.jsx)("img",{src:"https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Activities/Sparkles.png",alt:"Sparkles",width:"20",height:"20"})," Child Logger Inheritance"]}),"\n",(0,s.jsx)(n.p,{children:"Child loggers inherit settings by merging properties differently depending on their type:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"scope"})}),": ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"Appended"})}),(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:'["main"]'})," + ",(0,s.jsx)(n.code,{children:'"auth"'})," \u2192 ",(0,s.jsx)(n.code,{children:'["main", "auth"]'})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"context"})}),": ",(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.em,{children:"Merged, child overrides"})}),(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.code,{children:'{ app: "main", user: "guest" }'})," + ",(0,s.jsx)(n.code,{children:'{ user: "admin" }'})," \u2192 ",(0,s.jsx)(n.code,{children:'{ app: "main", user: "admin" }'})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"formatterConfig"})," / ",(0,s.jsx)(n.code,{children:"normalizerConfig"})]}),":",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:(0,s.jsxs)(n.em,{children:["Shallow merged per platform (",(0,s.jsx)(n.code,{children:"node"}),", ",(0,s.jsx)(n.code,{children:"browser"}),"), with child taking precedence"]})})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["\u2b50 This keeps child loggers ",(0,s.jsx)(n.strong,{children:"flexible and contextual"}),", without needing to re-specify everything."]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);