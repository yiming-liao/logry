"use strict";(self.webpackChunklogry_doc=self.webpackChunklogry_doc||[]).push([[913],{7586:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"core-concepts/logger-core","title":"Logger Core","description":"The core engine responsible for managing log levels, shared identity (id), and optional configurations for formatting, normalization, and handlers.","source":"@site/docs/core-concepts/logger-core.md","sourceDirName":"core-concepts","slug":"/core-concepts/logger-core","permalink":"/logry/docs/core-concepts/logger-core","draft":false,"unlisted":false,"editUrl":"https://github.com/yiming-liao/logry/edit/main/website/docs/core-concepts/logger-core.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"title":"Logger Core"},"sidebar":"tutorialSidebar","previous":{"title":"Child Loggers","permalink":"/logry/docs/core-concepts/child-loggers"},"next":{"title":"Handler Manager","permalink":"/logry/docs/core-concepts/handler-manager"}}');var t=o(4848),s=o(8453);const i={sidebar_position:3,title:"Logger Core"},l=" Logger Core",c={},a=[];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",code:"code",h1:"h1",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsxs)(n.h1,{id:"-logger-core",children:[(0,t.jsx)("img",{src:"https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Objects/Moai.png",alt:"Moai",width:"36",height:"36"})," Logger Core"]})}),"\n",(0,t.jsx)(n.p,{children:"The core engine responsible for managing log levels, shared identity (id), and optional configurations for formatting, normalization, and handlers."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Multiple logger instances can share a single core by specifying the same id, enabling centralized and synchronized log level management across instances."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"It supports dynamic runtime control of log verbosity:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"setLevel(level)"}),": updates the active log level"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"resetLevel()"}),": restores to the initial log level"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)("img",{src:"https://raw.githubusercontent.com/Tarikul-Islam-Anik/Animated-Fluent-Emojis/master/Emojis/Travel%20and%20places/Factory.png",alt:"Factory",width:"20",height:"20"})," When calling logry(), the system checks the Logger Core map by id.",(0,t.jsx)(n.br,{}),"\n","If found, it returns a Logger linked to that core; otherwise, it creates a new core and returns a Logger."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f Note: Core configurations are fixed per ",(0,t.jsx)(n.strong,{children:"LoggerCore"})," identified by ",(0,t.jsx)(n.strong,{children:"id"}),".",(0,t.jsx)(n.br,{}),"\n","Creating a logger with an existing id ignores new core-level options and logs a warning."]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u2139\ufe0f Note: In ",(0,t.jsx)(n.strong,{children:"Edge"})," runtime environments, the Logger Core concept is intentionally not available.",(0,t.jsx)(n.br,{}),"\n","This design aligns with the stateless and ephemeral nature of Edge environments."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["\ud83d\udc40 Want to see the current cores?",(0,t.jsx)(n.br,{}),"\n","Check them out with the ",(0,t.jsx)(n.code,{children:"inspectLoggerCores()"})," in ",(0,t.jsx)(n.a,{href:"/logry/docs/debugging-and-tools/devtools",children:"Devtools"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>l});var r=o(6540);const t={},s=r.createContext(t);function i(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);