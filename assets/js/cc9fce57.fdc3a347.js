"use strict";(self.webpackChunklogry_doc=self.webpackChunklogry_doc||[]).push([[7020],{8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var o=r(6540);const s={},t=o.createContext(s);function i(e){const n=o.useContext(t);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(t.Provider,{value:n},e.children)}},9605:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>i,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"core-concepts/child-loggers","title":"Child Loggers","description":"In Logry, every logger instance is lightweight and modular.","source":"@site/docs/core-concepts/child-loggers.md","sourceDirName":"core-concepts","slug":"/core-concepts/child-loggers","permalink":"/logry/docs/core-concepts/child-loggers","draft":false,"unlisted":false,"editUrl":"https://github.com/yiming-liao/logry/edit/main/website/docs/core-concepts/child-loggers.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Log Level","permalink":"/logry/docs/core-concepts/log-level"},"next":{"title":"Logger Core","permalink":"/logry/docs/core-concepts/logger-core"}}');var s=r(4848),t=r(8453);const i={sidebar_position:2},c="Child Loggers",l={},d=[];function g(e){const n={br:"br",code:"code",h1:"h1",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"child-loggers",children:"Child Loggers"})}),"\n",(0,s.jsxs)(n.p,{children:["In ",(0,s.jsx)(n.strong,{children:"Logry"}),", every logger instance is lightweight and modular.",(0,s.jsx)(n.br,{}),"\n","You can freely create ",(0,s.jsx)(n.strong,{children:"child loggers"})," that inherit settings from their parent \u2014 while overriding only what you need."]}),"\n",(0,s.jsx)("h4",{children:" Creating a Child Logger "}),"\n",(0,s.jsxs)(n.p,{children:["You can use the ",(0,s.jsx)(n.code,{children:".child()"})," method to create a scoped or customized logger:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-ts",children:'const appLogger = logry({ id: "main-app", level: "info" });\n\nconst authLogger = appLogger.child({\n  level: "debug", // override log level\n  scope: "auth", // add a scope\n  context: { userType: "admin" }, // inject default context\n});\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Child loggers inherit settings with ",(0,s.jsx)(n.strong,{children:"shallow merging (first-level only)"}),":","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"scope"}),": appended",(0,s.jsx)(n.br,{}),"\n","e.g., ",(0,s.jsx)(n.code,{children:'["main"] + "auth"'})," \u2192 ",(0,s.jsx)(n.code,{children:'["main", "auth"]'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"context"}),": merged with child overriding\ne.g., ",(0,s.jsx)(n.code,{children:'{ app: "main", user: "guest" }'})," + ",(0,s.jsx)(n.code,{children:'{ user: "admin" }'})," \u2192 ",(0,s.jsx)(n.code,{children:'{ app: "main", user: "admin" }'})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"formatterConfig / normalizerConfig"}),": shallow merged per platform (",(0,s.jsx)(n.strong,{children:"node"}),", ",(0,s.jsx)(n.strong,{children:"browser"}),"), with child taking precedence"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This keeps child loggers flexible and contextual \u2014 without needing to re-specify everything."})]})}function a(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(g,{...e})}):g(e)}}}]);