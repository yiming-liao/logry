"use strict";(self.webpackChunklogry_doc=self.webpackChunklogry_doc||[]).push([[4229],{8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>l});var t=n(6540);const s={},i=t.createContext(s);function o(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(i.Provider,{value:r},e.children)}},9579:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"modules/normalizer","title":"Normalizer","description":"Before any log is formatted or transported, Logry runs it through a platform-aware normalizer \u2014 ensuring consistent structure, reliable types, and flexible customization","source":"@site/docs/modules/normalizer.md","sourceDirName":"modules","slug":"/modules/normalizer","permalink":"/logry/docs/modules/normalizer","draft":false,"unlisted":false,"editUrl":"https://github.com/yiming-liao/logry/edit/main/website/docs/modules/normalizer.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Modules","permalink":"/logry/docs/category/modules"},"next":{"title":"Formatter","permalink":"/logry/docs/modules/formatter"}}');var s=n(4848),i=n(8453);const o={sidebar_position:1},l="Normalizer",a={},d=[{value:"What it does",id:"what-it-does",level:3},{value:"Customization",id:"customization",level:3},{value:"Platform Awareness",id:"platform-awareness",level:3}];function c(e){const r={blockquote:"blockquote",br:"br",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"normalizer",children:"Normalizer"})}),"\n",(0,s.jsxs)(r.p,{children:["Before any log is formatted or transported, ",(0,s.jsx)(r.strong,{children:"Logry"})," runs it through a platform-aware normalizer \u2014 ensuring consistent structure, reliable types, and flexible customization"]}),"\n",(0,s.jsx)(r.h3,{id:"what-it-does",children:"What it does"}),"\n",(0,s.jsx)(r.p,{children:"The Normalizer transforms a raw log input into a normalized shape, handling core parts like:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"timestamp"}),"\n",(0,s.jsx)(r.li,{children:"id"}),"\n",(0,s.jsx)(r.li,{children:"level"}),"\n",(0,s.jsx)(r.li,{children:"scope"}),"\n",(0,s.jsx)(r.li,{children:"message"}),"\n",(0,s.jsx)(r.li,{children:"meta"}),"\n",(0,s.jsx)(r.li,{children:"context"}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Each part has a dedicated normalizer, all of which can be overridden via custom logic."}),"\n",(0,s.jsx)(r.h3,{id:"customization",children:"Customization"}),"\n",(0,s.jsx)(r.p,{children:"Every normalizer supports a customNormalizer function, letting you override default behavior:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",children:"customNormalizer?: ({ part }) => NormalizedValue;\n"})}),"\n",(0,s.jsx)(r.p,{children:"You can also fine-tune behavior using extra options per part."}),"\n",(0,s.jsxs)(r.table,{children:[(0,s.jsx)(r.thead,{children:(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.th,{children:"Part"}),(0,s.jsx)(r.th,{children:"Extra Options Available"})]})}),(0,s.jsxs)(r.tbody,{children:[(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"timestamp"})}),(0,s.jsx)(r.td,{children:"style, useUTC, showTimeOnly"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"level"})}),(0,s.jsx)(r.td,{children:"style"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"scope"})}),(0,s.jsx)(r.td,{children:"separator"})]}),(0,s.jsxs)(r.tr,{children:[(0,s.jsx)(r.td,{children:(0,s.jsx)(r.code,{children:"meta"})}),(0,s.jsx)(r.td,{children:"errorStackLines"})]})]})]}),"\n",(0,s.jsx)(r.h3,{id:"platform-awareness",children:"Platform Awareness"}),"\n",(0,s.jsx)(r.p,{children:"Normalization logic can vary between Node and Browser environments, adapting behavior accordingly."}),"\n",(0,s.jsx)(r.p,{children:"For example:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Timestamps appear as full ISO 8601 UTC strings in Node, but as simplified human-readable strings in the browser."}),"\n",(0,s.jsx)(r.li,{children:"Error stack traces can be more verbose on the server, while trimmed on the client."}),"\n"]}),"\n",(0,s.jsxs)(r.blockquote,{children:["\n",(0,s.jsxs)(r.p,{children:["You can define environment-specific behavior using the normalizerConfig structure.",(0,s.jsx)(r.br,{}),"\n","It can be set globally in ",(0,s.jsx)(r.strong,{children:"logry(...)"}),", scoped to a ",(0,s.jsx)(r.strong,{children:"logger.child(...)"}),", or ",(0,s.jsx)(r.strong,{children:"overridden per log method"}),":"]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typeScript",children:' normalizerConfig: {\n    node: {\n      timestamp: {\n        style: "iso",\n        useUTC: true,\n      },\n      meta: {\n        errorStackLines: 10,\n      },\n      level: {\n        style: "upper",\n      },\n      id: {\n        customNormalizer: ({ part }) => `node-${part}`,\n      },\n    },\n    browser: {\n      timestamp: {\n        style: "pretty",\n        useUTC: false,\n      },\n      meta: {\n        errorStackLines: 3,\n      },\n      level: {\n        style: "lower",\n      },\n    },\n  },\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}}}]);